#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node *next;
};
struct Node* head = NULL;
struct Node* createNode(int ele){
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode -> data = ele;
    newNode -> next = NULL;
    return newNode;
}
void insertNodeAtBeg(int ele){
    struct Node* newNode = createNode(ele);
    if(head==NULL){
        head = newNode;
        head -> next = head;
        }
        else{
            newNode -> next = head;
            struct Node* temp = head;
            while(temp->next!=head){
                temp = temp -> next;
            }
            temp -> next = newNode;
            head = newNode;
        }
    printf("Node Inserted !!!!\n");
}
void insertNodeAtEnd(int ele){
    struct Node *newNode = createNode(ele);
    if (head == NULL){
        head = newNode;
        head -> next = head;
    }
    else{
        struct Node *temp = head;
        while (temp -> next != head){
            temp = temp -> next;
        }
        temp -> next = newNode;
        newNode -> next = head;
    }
    printf("Node Inserted !!!\n");
}
void insertNodeAtanyPos(int ele, int pos){
    if(head == NULL)
        printf("List is empty !!!\n");
    else if(pos == 1)
        insertNodeAtBeg(ele);
    else{
        struct Node *newNode = createNode(ele);
        newNode -> data = ele;
        newNode -> next = NULL;
        struct Node *temp = head;
        int i = 1;
        while(i < pos - 1 && temp->next != head){
            temp = temp -> next;
            i++;
        }
        if(temp -> next != head && pos > 0){
            newNode -> next = temp -> next;
            temp -> next = newNode;
            printf("Node Inserted !!!\n");
        }
        else{
            printf("Invalid Position!!!\n");
        }
    }
}
void deleteNodeFromBeg(){
    if(head==NULL)
        printf("List is empty");
    else if(head->next==head){   //if list contain only single node
        struct Node* temp=head;
        head=NULL;
        free(temp);
        printf("Node deleted!!!\n");
    }
    else{              //if list contain more then one node
        struct Node* temp=head;
        while(temp->next != head){
            temp=temp->next;
        }
        struct Node* t=head;
        head=head->next;
        temp->next=head;
        free(t);
        printf("Node deleted!!!\n");
    }
}
void deleteNodeFromEnd(){
    if(head==NULL)
        printf("List is empty");
    else if(head->next==head){   //if list contain only single node
            struct Node* temp=head;
            head=NULL;
            free(temp);
            printf("Node deleted!!!\n");
    }
    else{              //if list contain more then one node
        struct Node* temp=head;
        while(temp->next->next !=head){
            temp=temp->next;
        }
        struct Node* t=temp->next;
        temp->next=head;
        free(t);
        printf("Node deleted!!!\n");
    }
}
void deleteNodeFromAnyPos(int pos){
    if(head == NULL)
        printf("List is empty !!!\n");
    else if(pos == 1)
        deleteNodeFromBeg();
    else{
        int i = 1;
        struct Node* temp = head;
        while(i < pos - 1 && temp->next != head){
        i++;
        temp = temp->next;
       }
       if(temp->next != head && pos > 0){
            temp->next = temp->next->next;
            free(temp);
            printf("Node deleted!!!\n");
       }
       else{
            printf("Invalid Position!!!\n");
        }
    }
}
void search(int target){
    if(head == NULL)
    printf("List is empty!!!\n");
    else{
        struct Node* temp = head;
        while(temp != head){
            if(temp -> data == target){
                printf("Found!!!\n");
                return;
            }
            temp = temp -> next;
        }
        printf("Not Found!!!\n");
    }
}
void display(){
    if(head == NULL)
        printf("List is Empty!!!!\n");
    else{
        printf("Elements are : \n");
            struct Node* temp = head;
        while(temp != head){
            printf("%d ",temp -> data);
            temp = temp -> next;
        }
    }
}
int main(){
    while(1){
        printf("-------Singly Linked List---------\n");
        printf("1. Insert Node in Beginning\n");
        printf("2. Insert Node at End\n");
        printf("3. Insert Node at any Position\n");
        printf("4. Delete Node From Beginning\n");
        printf("5. Delete Node From End\n");
        printf("6. Delete Node From any Position\n");
        printf("7. Search Element in the List\n");
        printf("8. Display List\n");
        printf("9. Exit\n");
        int choice,ele,pos,target;
        printf("Enter Choice : ");
        scanf("%d", &choice);
        switch(choice){
            case 1:
                printf("Enter the Element : ");
                scanf("%d",&ele);
                insertNodeAtBeg(ele);
                break;
            case 2:
                printf("Enter the element : ");
                scanf("%d", &ele);
                insertNodeAtEnd(ele);
                break;
            case 3:
                printf("Enter the element : ");
                scanf("%d", &ele);
                printf("Enter the position : ");
                scanf("%d", &pos);
                insertNodeAtanyPos(ele, pos);
                break;
            case 4:
                deleteNodeFromBeg();
                break;
            case 5:
                deleteNodeFromEnd();
                break;
            case 6:
                printf("Enter the position: ");
                scanf("%d", &pos); 
                deleteNodeFromAnyPos(pos);
                break;
            case 7:
                printf("Enter element : ");
                scanf("%d", &target);
                search(target);
                break;
            case 8:
                display();
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid Choice !!!!!\n");
        }
        printf("\n");
    }
    return 0;
}
