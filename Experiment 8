#include<stdio.h>
#include<stdlib.h>
struct Node{
    struct Node* prev;
    int data;
    struct Node* next;  
};
struct Node* createNode(int ele){
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = ele;
    temp->prev = temp->next = NULL;
    return temp;
}
struct Node* head=NULL;
void insertNodeInBeg(int ele){
    struct Node* newNode = createNode(ele);
    if(head==NULL)
        head= newNode;
        else{
            newNode -> next = head;
            head->prev=newNode;
            head = newNode;
        }
    printf("Node Inserted !!!!\n");
}
void insertNodeAtEnd(int ele){
    struct Node* newNode = createNode(ele);
    if(head==NULL)
        head = newNode;
        else{
            struct Node* temp = head;
            while(temp->next!=NULL){
                temp = temp -> next;
            }
            temp -> next = newNode;
            newNode->prev = temp;
        }
    printf("Node Inserted !!!!\n");
}
void insertNodeAtanyPos(int ele, int pos){
    if(head == NULL && pos!=1)
        printf("List is empty !!!\n");
    else if(pos == 1)
        insertNodeInBeg(ele);
    else{
       struct Node* newNode = createNode(ele);
       struct Node* temp = head;
       int i = 1;
       while(i < pos && temp != NULL){
        temp = temp -> next;
        i++;
       }
       if(temp != NULL && pos > 0){
        newNode->prev = temp->prev;
        temp->prev->next = newNode;
        newNode -> next = temp;
        temp -> prev = newNode;
        printf("Node Inserted !!!\n");
        }
        else{
            printf("Invalid Position!!!\n");
        }
    }
}
void deleteNodeFromBeg(){
    if(head==NULL)
        printf("List is empty");
    else{
        struct Node* temp=head;
        head=head->next;
        if(head!=NULL)
            head->prev=NULL;
        free(temp);
        printf("Node deleted!!!\n");
    }
}
void deleteNodeFromEnd(){
    if(head==NULL)
        printf("List is empty");
    else{
        struct Node* temp=head;
        while(temp->next !=NULL){
            temp=temp->next;
        }
        if(temp->prev != NULL)
            temp->prev->next=NULL;
        else
            head=NULL;
        free(temp);
        printf("Node Deleted!!!\n");
    }
}
void deleteNodeFromAnyPos(int pos){
    if(head == NULL)
        printf("List is empty !!!\n");
    else if(pos == 1)
        deleteNodeFromBeg();
    else{
        int i = 1;
        struct Node* temp = head;
        while(i != pos && temp != NULL){
        i++;
        temp = temp->next;
       }
       if(temp != NULL){
            temp->prev->next = temp->next;
       if(temp->next != NULL)
            temp->next->prev = temp->prev;
            free(temp);
       }
       else{
            printf("Invalid Position!!!\n");
        }
    }
}
void search(int target){
    if(head == NULL)
    printf("List is empty!!!\n");
    else{
        struct Node* temp = head;
        while(temp != NULL){
            if(temp -> data == target){
                printf("Found!!!\n");
                return;
            }
            temp = temp -> next;
        }
        printf("Not Found!!!\n");
    }
}
void display(){
    if(head == NULL)
        printf("List is Empty!!!!\n");
    else{
        printf("Elements are : \n");
            struct Node* temp = head;
        while(temp != NULL){
            printf("%d ",temp -> data);
            temp = temp -> next;
        }
    }
}
int main(){
    while(1){
        printf("-------Doubly Linked List---------\n");
        printf("1. Insert Node in Beginning\n");
        printf("2. Insert Node at End\n");
        printf("3. Insert Node at any Position\n");
        printf("4. Delete Node From Beginning\n");
        printf("5. Delete Node From End\n");
        printf("6. Delete Node From any Position\n");
        printf("7. Search Element in the List\n");
        printf("8. Display List\n");
        printf("9. Exit\n");
        int choice,ele,pos,target;
        printf("Enter Choice : ");
        scanf("%d", &choice);
        switch(choice){
            case 1:
                printf("Enter the Element : ");
                scanf("%d",&ele);
                insertNodeInBeg(ele);
                break;
            case 2:
                printf("Enter the element : ");
                scanf("%d", &ele);
                insertNodeAtEnd(ele);
                break;
            case 3:
                printf("Enter the element : ");
                scanf("%d", &ele);
                printf("Enter the position : ");
                scanf("%d", &pos);
                insertNodeAtanyPos(ele, pos);
                break;
            case 4:
                deleteNodeFromBeg();
                break;
            case 5:
                deleteNodeFromEnd();
                break;
            case 6:
                printf("Enter the position: ");
                scanf("%d", &pos);        
                deleteNodeFromAnyPos(pos);
                break;
            case 7:
                printf("Enter element : ");
                scanf("%d", &target);
                search(target);
                break;
            case 8:
                display();
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid Choice !!!!!\n");
        }
        printf("\n");
    }
    return 0;
}
