#include<stdio.h>
#include<stdlib.h>
struct TreeNode{
    struct TreeNode* left;
    int data;
    struct TreeNode* right; 
};
struct TreeNode* createNode(int value){
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->data = value;
    node->left = node->right = NULL;
    return node;
}
struct TreeNode* insert(struct TreeNode* root, int value){
    if(root == NULL)
        return createNode(value);
    else if(value < root->data)
        root->left = insert(root->left, value);
    else if(value > root->data)
        root->right = insert(root->right, value);
        return root;
}
void preorder(struct TreeNode* root){
    if(root != NULL){
        printf("%d ",root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void inorder(struct TreeNode* root){
    if(root != NULL){
        inorder(root->left);
        printf("%d ",root->data);
        inorder(root->right);
    }
}
void postorder(struct TreeNode* root){
    if(root != NULL){
        postorder(root->left);
        postorder(root->right);
        printf("%d ",root->data);
    }
}
struct TreeNode* search(struct TreeNode* root, int value){
    if(root==NULL)
        return NULL;
    else if(root->data==value)
        return root;
    else if(value<root->data)
        return search(root->left,value);
    else
        return search(root->right,value);
}
struct TreeNode* findMin(struct TreeNode* node){
    while(node->left != NULL)
        node = node->left;
    return node;
}
struct TreeNode* delete(struct TreeNode* root , int value){
    if(root==NULL){
        printf("Element not found !!!!\n");
        return NULL;
    }
    else if(value<root->data)
        root->left=delete(root->left,value);
    else if(value>root->data)
        root->right=delete(root->right,value);
    else{
        if(root->left==NULL && root->right==NULL){
            free(root);
            return NULL;
        }
        else if(root->right==NULL){  //Only left child
            struct TreeNode* temp=root->left;
            free(root);
            return temp;
        }
        else if(root->left==NULL){  //Only right child
            struct TreeNode* temp=root->right;
            free(root);
            return temp;
        }
        else{ // two child
            struct TreeNode* temp=findMin(root->right);
            root->data=temp->data;
            root->right=delete(root->right,temp->data);
        }
    }
}
int main(){
    int choice,n;
    struct TreeNode* root = NULL;
    while(1){
        printf("1. Insertion\n");
		printf("2. Preorder\n");
		printf("3. Inorder\n");
		printf("4. Postorder\n");
		printf("5. Search\n");
        printf("6. Delete\n");
        printf("7. Exit\n");
        printf("Enter Choice : ");
        scanf("%d", &choice);
        switch(choice){
            case 1:
                printf("Enter the value of N : ");
                scanf("%d",&n);
                root=insert(root, n);
                printf("Element Inserted!!!\n");
				break;
			case 2:
                printf("\n Pre-Order : ");
                preorder(root);
                printf("\n");
				break;
			case 3:
                printf("\n In-Order : ");
                inorder(root);
                printf("\n");
				break;   
			case 4:
                printf("\n Post-Order : ");
                postorder(root);
                printf("\n");
				break;
			case 5:
				printf("Enter Value: ");
                scanf("%d",&n);
                if (search(root, n))
                    printf("Found!\n");
                else
                    printf("Not Found!\n");
                    break;
            case 6:
                printf("Enter Value: ");
                scanf("%d",&n);
                delete(root, n);
                printf("Node Deleted !!!\n");
				break;
            case 7:
                exit(0);
                break;
			default:
				printf("Invalid Choice !!!!!!!\n");
        }
    }
    return 0;
}
