#include <stdio.h>
#include <stdlib.h>
#define MAX 100
int tree[MAX];

void init(){
    for (int i = 0; i < MAX; i++){
        tree[i] = -1;
    }
}
void insert(int value, int root){
    if (tree[root] == -1)
        tree[root] = value;
    else if (value < tree[root])
        insert(value, 2 * root + 1); // left
    else if (value > tree[root])
        insert(value, 2 * root + 2); // right
}
void preorder(int root){
    if (tree[root] == -1)
        return;
    printf("%d ", tree[root]); // visit root
    preorder(2 * root + 1);    // left
    preorder(2 * root + 2);    // right
}
void inorder(int root){
    if (tree[root] == -1)
        return;
    inorder(2 * root + 1);     // left
    printf("%d ", tree[root]); // visit root
    inorder(2 * root + 2);     // right
}
void postorder(int root){
    if (tree[root] == -1)
        return;
    postorder(2 * root + 1);   // left
    postorder(2 * root + 2);   // right
    printf("%d ", tree[root]); // visit root
}
int search(int i,int target){
    while (i < MAX && tree[i] != -1){
        if (tree[i] == target)
            return i;
        else if (target < tree[i])
            i = 2 * i + 1;
        else
            i = 2 * i + 2;
    }
    return -1;
}
int findMin(int i){ // through array
    while (i < MAX && tree[2 * i + 1] != -1){ // minimum is in left side
        i = 2 * i + 1;
    }
    return i;
}
int findMax(int i){ // through array
    while (i < MAX && tree[2 * i + 2] != -1){ // maximum is on right side
        i = 2 * i + 2;
    }
    return i;
}
void delete(int i, int value){
    i = search(i, value);
    if (i == -1)
        printf("Element not found !!!!\n");
    else{
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        if ((left >= MAX || tree[left] == -1) && (right >= MAX || tree[right] == -1)) // having zero child
            tree[i] = -1;
        else if (tree[right] == -1){ // having left child only
            int max = findMax(left);
            tree[i] = tree[max];
            delete(max, tree[max]);
        }
        else{ // having 2 children or having right child only
            int min = findMin(right);
            tree[i] = tree[min];
            delete(min, tree[min]);
        }
    }
}
int main(){
    init();
    int n, choice, index;
    while (1){
        printf("1. Insertion\n");
        printf("2. Preorder\n");
        printf("3. Inorder\n");
        printf("4. Postorder\n");
        printf("5. Search\n");
        printf("6. Delete\n");
        printf("7. Exit\n");
        printf("Enter Choice : ");
        scanf("%d", &choice);
        switch (choice){
        case 1:
            printf("Enter the value : ");
            scanf("%d", &n);
            insert(n, 0);
            printf("Element Inserted!!!\n");
            break;
        case 2:
            printf("\n Pre-Order : ");
            preorder(0);
            printf("\n");
            break;
        case 3:
            printf("\n In-Order : ");
            inorder(0);
            printf("\n");
            break;
        case 4:
            printf("\n Post-Order : ");
            postorder(0);
            printf("\n");
            break;
        case 5:
            printf("Enter Value: ");
            scanf("%d", &n);
            index = search(0, n);
            if (index == -1)
                printf("Not Found!!\n");
            else
                printf("Found!!\n");
            break;
        case 6:
            printf("Enter Value: ");
            scanf("%d", &n);
            delete(0,n);
            break;
        case 7:
            exit(0);
            break;
        default:
            printf("Invalid Choice !!!!!!!\n");
        }
    }
    return 0;
}
